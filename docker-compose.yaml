volumes:
  log_share: {}
  loki_stora_data: {}
  postgres_data: {}

services:
  telegram-bot:
    depends_on:
      liquibase:
        condition: service_completed_successfully
    build:
      context: ./telegram_bot
    env_file:
      - ./telegram_bot/.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
    volumes:
      - log_share:/app/logs

  # http://loki-local:3100
  loki-local:
    image: grafana/loki:2.9.8
    volumes:
      - loki_stora_data:/loki

  grafana:
    image: grafana/grafana:11.1.0
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/.env

  promtail:
    image: grafana/promtail:2.9.8
    volumes:
      - log_share:/logs
      - ./promtail/config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml

  liquibase:
    depends_on:
      postgres:
        condition: service_healthy
    build: ./liquibase
    command: [
      "--changeLogFile=initial.postgres.yaml",
      "--url=jdbc:postgresql://${DB_HOST}:${DB_INTERNAL_PORT}/${POSTGRES_DB}",
      "update"
    ]
    environment:
      LIQUIBASE_COMMAND_USERNAME: ${POSTGRES_USER}
      LIQUIBASE_COMMAND_PASSWORD: ${POSTGRES_PASSWORD}

  postgres:
    image: postgres:16.3
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      start_period: 1s # How long to wait before running the first healthcheck
    ports:
      - "${DB_EXTERNAL_PORT}:${DB_INTERNAL_PORT}"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data

  user-management:
    build:
      context: ./user_manager
    env_file:
      - ./user_manager/.env
    environment:
      FLASK_APP: manager.py
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DB_HOST: ${DB_HOST}
    ports:
      - "5005:5000"
    depends_on:
      - postgres
    volumes:
      - log_share:/app/logs
